#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 16 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 2424 0 29 3 16 #"#lang plai-typed"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 54
(
 #" | interpretador simples,"
 #" sem vari\303\241veis ou fun\303\247\303\265ess"
) 0 0 17 29 1 #"\n"
0 0 17 3 3 #" |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 75
(
 #"#| primeiro as express\303\265es \"primitivas\", ou seja, diretament"
 #"e interpretadas"
) 0 0 17 29 1 #"\n"
0 0 17 3 3 #" |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 31 #";Luis Vitor Zerkowski - 9837201"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";Isis Ardisson Logullo - 7577410 "
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"numC"
0 0 25 3 5 #"    ("
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"number"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 3 #"idC"
0 0 25 3 6 #"     ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"plusC"
0 0 25 3 4 #"   ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #") ("
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"multC"
0 0 25 3 4 #"   ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #") ("
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"lamC"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"appC"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"fun"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #") ("
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 3 #"ifC"
0 0 25 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #") ("
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #") ("
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"consC"
0 0 25 3 4 #"   ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #")]"
0 0 17 3 26 #"; Creates cell with a pair"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"carC"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"pair"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #")]"
0 0 17 3 28 #"; Gets 1st element of a pair"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"cdrC"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"pair"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #")]"
0 0 17 3 28 #"; Gets 2nd element of a pair"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 7 #"letrecC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #") ("
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 6 #"quoteC"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 10 #"read-loopC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 17 3 55
(
 #"#| agora a linguagem aume"
 #"ntada pelo a\303\247\303\272car sint\303\241tico"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 57
(
 #" | neste caso a opera\303\247\303\243"
 #"o de subtra\303\247\303\243o e menus un\303\241rio"
) 0 0 17 29 1 #"\n"
0 0 17 3 3 #" |#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"numS"
0 0 25 3 5 #"    ("
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"number"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 3 #"idS"
0 0 25 3 6 #"     ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"lamS"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"appS"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"fun"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"plusS"
0 0 25 3 4 #"   ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 7 #"bminusS"
0 0 25 3 2 #" ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 7 #"uminusS"
0 0 25 3 2 #" ("
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"multS"
0 0 25 3 4 #"   ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 3 #"ifS"
0 0 25 3 6 #"     ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"consS"
0 0 25 3 4 #"   ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"carS"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"pair"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"cdrS"
0 0 25 3 5 #"    ("
0 0 14 3 4 #"pair"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"letS"
0 0 25 3 5 #"    ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"let*S"
0 0 25 3 4 #"   ("
0 0 14 3 2 #"s1"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 2 #"s2"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 7 #"letrecS"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #") ("
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 6 #"quoteS"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 10 #"read-loopS"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 2 #" ["
0 0 14 3 2 #"as"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 3 #"]) "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 3 1 #" "
0 0 14 3 2 #"as"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"numS"
0 0 25 3 5 #"    ("
0 0 14 3 1 #"n"
0 0 25 3 10 #")        ("
0 0 14 3 4 #"numC"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 3 #"idS"
0 0 25 3 6 #"     ("
0 0 14 3 1 #"s"
0 0 25 3 10 #")        ("
0 0 14 3 3 #"idC"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"lamS"
0 0 25 3 5 #"    ("
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 8 #")      ("
0 0 14 3 4 #"lamC"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"appS"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"fun"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 4 #")  ("
0 0 14 3 4 #"appC"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 3 #"fun"
0 0 25 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 5 #"plusS"
0 0 25 3 4 #"   ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 8 #")      ("
0 0 14 3 5 #"plusC"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 5 #"multS"
0 0 25 3 4 #"   ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 8 #")      ("
0 0 14 3 5 #"multC"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 7 #"bminusS"
0 0 25 3 2 #" ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 8 #")      ("
0 0 14 3 5 #"plusC"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 5 #"multC"
0 0 25 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 7 #"uminusS"
0 0 25 3 2 #" ("
0 0 14 3 1 #"e"
0 0 25 3 10 #")        ("
0 0 14 3 5 #"multC"
0 0 25 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 3 #"ifS"
0 0 25 3 6 #"     ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 6 #")    ("
0 0 14 3 3 #"ifC"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 5 #"consS"
0 0 25 3 4 #"   ("
0 0 14 3 2 #"b1"
0 0 25 3 1 #" "
0 0 14 3 2 #"b2"
0 0 25 3 6 #")    ("
0 0 14 3 5 #"consC"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 2 #"b1"
0 0 25 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 2 #"b2"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"carS"
0 0 25 3 5 #"    ("
0 0 14 3 1 #"c"
0 0 25 3 10 #")        ("
0 0 14 3 4 #"carC"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"cdrS"
0 0 25 3 5 #"    ("
0 0 14 3 1 #"c"
0 0 25 3 10 #")        ("
0 0 14 3 4 #"cdrC"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"letS"
0 0 25 3 5 #"    ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 6 #")    ("
0 0 14 3 4 #"appC"
0 0 25 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 5 #"let*S"
0 0 25 3 4 #"   ("
0 0 14 3 2 #"s1"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 1 #" "
0 0 14 3 2 #"s2"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 4 #")  ("
0 0 14 3 4 #"appC"
0 0 25 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 25 3 1 #" "
0 0 14 3 2 #"s1"
0 0 25 3 2 #" ("
0 0 14 3 4 #"appC"
0 0 25 3 2 #" ("
0 0 14 3 4 #"lamC"
0 0 25 3 1 #" "
0 0 14 3 2 #"s2"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 2 #"e2"
0 0 25 3 5 #"))) ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 2 #"e1"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 7 #"letrecS"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 6 #")    ("
0 0 14 3 7 #"letrecC"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"e"
0 0 25 3 3 #") ("
0 0 14 3 7 #"desugar"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 6 #"quoteS"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"s"
0 0 25 3 10 #")        ("
0 0 14 3 6 #"quoteC"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 10 #"read-loopS"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 7 #")     ("
0 0 14 3 10 #"read-loopC"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    ))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 33 #"; We need a new value for the box"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"numV"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"number"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"closV"
0 0 25 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #") ("
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 3 #"Env"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 5 #"consV"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"symV"
0 0 25 3 3 #"  ("
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  )"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 38 #"; Bindings associate symbol with Boxes"
0 0 25 29 1 #"\n"
0 0 17 3 78
(
 #"; we need this to be able to change the value of a binding, which is"
 #" important"
) 0 0 25 29 1 #"\n"
0 0 17 3 22 #"; to implement letrec."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 7 #"Binding"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 4 #"bind"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #") ("
0 0 14 3 3 #"val"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 5 #"boxof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 50 #"; Env remains the same, we only change the Binding"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 17 #"define-type-alias"
0 0 25 3 1 #" "
0 0 14 3 3 #"Env"
0 0 25 3 2 #" ("
0 0 14 3 6 #"listof"
0 0 25 3 1 #" "
0 0 14 3 7 #"Binding"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"mt-env"
0 0 25 3 1 #" "
0 0 14 3 5 #"empty"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 10 #"extend-env"
0 0 25 3 1 #" "
0 0 14 3 4 #"cons"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 43 #"; Storage's operations are similar to Env's"
0 0 25 29 1 #"\n"
0 0 17 3 17 #";   bind <-> cell"
0 0 25 29 1 #"\n"
0 0 17 3 23 #";   mt-env <-> mt-store"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";   extend-env <-> override-store"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #"; lookup changes its return type"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 25 3 2 #" ["
0 0 14 3 7 #"varName"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"symbol"
0 0 25 3 3 #"] ["
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 3 #"Env"
0 0 25 3 3 #"]) "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 5 #"boxof"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 1 #")"
0 0 17 3 64
#"; lookup returns the box, we need this to change the value later"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"            [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"lookup"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 25 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 25 3 1 #" "
0 0 14 3 7 #"varName"
0 0 25 3 2 #") "
0 0 19 3 22 #"\" n\303\243o foi encontrado\""
0 0 25 3 4 #"))] "
0 0 17 3 23 #"; livre (n\303\243o definida)"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                    [("
0 0 14 3 8 #"symbol=?"
0 0 25 3 1 #" "
0 0 14 3 7 #"varName"
0 0 25 3 2 #" ("
0 0 14 3 9 #"bind-name"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 6 #")))   "
0 0 17 3 8 #"; achou!"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 8 #"bind-val"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 25 3 1 #" "
0 0 14 3 7 #"varName"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 15 #"))])]))        "
0 0 17 3 14 #"; v\303\252 no resto"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #"; Primitive operators"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num+"
0 0 25 3 2 #" ["
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 3 #"] ["
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 3 #"]) "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"numV?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 5 #"numV?"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"numV"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"num+"
0 0 25 3 1 #" "
0 0 19 3 35 #"\"Um dos argumentos n\303\243o \303\251 n\303\272mero\""
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"num*"
0 0 25 3 2 #" ["
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 3 #"] ["
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 3 #"]) "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 5 #"numV?"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 5 #"numV?"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 4 #"numV"
0 0 25 3 2 #" ("
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 6 #"numV-n"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 6 #"numV-n"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"num*"
0 0 25 3 1 #" "
0 0 19 3 35 #"\"Um dos argumentos n\303\243o \303\251 n\303\272mero\""
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 40 #"; Return type for the interpreter, Value"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 2 #" ["
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 3 #"] ["
0 0 14 3 3 #"env"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 3 #"Env"
0 0 25 3 4 #"] ) "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 9 #"type-case"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprC"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"numC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 3 #"idC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 4 #")  ("
0 0 14 3 5 #"unbox"
0 0 25 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #"))]"
0 0 17 3 63
#"; we need to unbox the value in the environment before using it"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"lamC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #") ("
0 0 14 3 5 #"closV"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #" "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 25 #"; application of function"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"appC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 7 #"closure"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 14 3 8 #"argvalue"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"a"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 15 3 9 #"type-case"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 1 #" "
0 0 14 3 7 #"closure"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ["
0 0 14 3 5 #"closV"
0 0 25 3 2 #" ("
0 0 14 3 9 #"parameter"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 25 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 25 3 1 #" "
0 0 14 3 9 #"parameter"
0 0 25 3 2 #" ("
0 0 14 3 3 #"box"
0 0 25 3 1 #" "
0 0 14 3 8 #"argvalue"
0 0 25 3 3 #")) "
0 0 14 3 3 #"env"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 19 3 37 #"\"operation app aplied to non-closure\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"              ))]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 36 #";I left plusC without error-checking"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 5 #"plusC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 4 #"left"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 14 3 5 #"right"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"num+"
0 0 25 3 1 #" "
0 0 14 3 4 #"left"
0 0 25 3 1 #" "
0 0 14 3 5 #"right"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 6 #";multC"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 5 #"multC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 15 3 3 #"let"
0 0 25 3 4 #" ( ("
0 0 14 3 4 #"left"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 5 #"right"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 17 3 48 #";in this case type cheking is a little different"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"numV?"
0 0 25 3 1 #" "
0 0 14 3 4 #"left"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"numV?"
0 0 25 3 1 #" "
0 0 14 3 5 #"right"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 4 #"num*"
0 0 25 3 1 #" "
0 0 14 3 4 #"left"
0 0 25 3 1 #" "
0 0 14 3 5 #"right"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 19 3 54 #"\"second argument of multiplication not a number value\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                 ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 19 3 53 #"\"first argument of multiplication not a number value\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                 )]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 16 #"; ifC serializes"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 3 #"ifC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ["
0 0 14 3 4 #"numV"
0 0 25 3 2 #" ("
0 0 14 3 5 #"value"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #" )"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 4 #" ))]"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 19 3 24 #"\"condition not a number\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                   )]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 20 #"; Working with lists"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 5 #"consC"
0 0 25 3 2 #" ("
0 0 14 3 2 #"b1"
0 0 25 3 1 #" "
0 0 14 3 2 #"b2"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 4 #" ( ("
0 0 14 3 3 #"car"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 2 #"b1"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 27 #"                          ("
0 0 14 3 3 #"cdr"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 2 #"b2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ("
0 0 14 3 5 #"consV"
0 0 25 3 1 #" "
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"carC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ["
0 0 14 3 5 #"consV"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                       "
0 0 14 3 3 #"car"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 19 3 25 #"\"car applied to non-cell\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                )]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"cdrC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"c"
0 0 25 3 3 #") ("
0 0 15 3 9 #"type-case"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 1 #"c"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ["
0 0 14 3 5 #"consV"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                       "
0 0 14 3 3 #"cdr"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 19 3 25 #"\"cdr applied to non-cell\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                )]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 22 #";[letC (name arg body)"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 59
#";      (let* ([new-bind (bind name (box (interp arg env)))]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 50 #";             [new-env (extend-env new-bind env)])"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 32 #";        (interp body new-env))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 40 #";[let*C (name_1 arg_1 name_2 arg_2 body)"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 66
#";       (let* ([new-bind_1 (bind name_1 (box (interp arg_1 env)))]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 54 #";             [new-env_1  (extend-env new-bind_1 env)]"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 71
(
 #";             [new-bind_2 (bind name_2 (box (interp arg_2 new-env_1)"
 #"))]"
) 0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 61
#";             [new-env_2  (extend-env new-bind_2 new-env_1)])"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 17 3 34 #";        (interp body new-env_2))]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 7 #"letrecC"
0 0 25 3 2 #" ("
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 15 3 4 #"let*"
0 0 25 3 3 #" (["
0 0 14 3 7 #"new-box"
0 0 25 3 2 #" ("
0 0 14 3 3 #"box"
0 0 25 3 2 #" ("
0 0 14 3 4 #"numV"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ["
0 0 14 3 5 #"fecha"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 3 #"arg"
0 0 25 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 25 3 2 #" ("
0 0 14 3 4 #"bind"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 7 #"new-box"
0 0 25 3 2 #") "
0 0 14 3 3 #"env"
0 0 25 3 4 #"))])"
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                   ("
0 0 15 3 9 #"type-case"
0 0 25 3 1 #" "
0 0 14 3 5 #"Value"
0 0 25 3 1 #" "
0 0 14 3 5 #"fecha"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ["
0 0 14 3 5 #"closV"
0 0 25 3 2 #" ("
0 0 14 3 4 #"arg2"
0 0 25 3 1 #" "
0 0 14 3 5 #"body2"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #") ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 5 #"dummy"
0 0 25 3 2 #" ("
0 0 14 3 8 #"set-box!"
0 0 25 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 2 #") "
0 0 14 3 5 #"fecha"
0 0 25 3 5 #")]) ("
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 1 #" "
0 0 14 3 3 #"env"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 22 #"                     ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 6 #"interp"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"nothing\""
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"             )]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 6 #"quoteC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 4 #"symV"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 10 #"read-loopC"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 2 #" ("
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (("
0 0 14 3 5 #"input"
0 0 25 3 2 #" ("
0 0 14 3 4 #"read"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"and"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp-symbol?"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 4 #" ) ("
0 0 14 3 3 #"eq?"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 2 #") "
0 0 22 3 1 #"'"
0 0 14 3 4 #"@END"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 22 #"\"FINISHED-INTERPRETER\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 25 3 2 #" ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 20 #"\"\\nintepret-command:"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 14 3 5 #"input"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"\\nresult:"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 7 #"display"
0 0 25 3 2 #" ("
0 0 14 3 5 #"input"
0 0 25 3 2 #" ("
0 0 14 3 4 #"read"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 7 #"display"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"\\n"
0 0 19 3 1 #"\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 32 #"                               ("
0 0 14 3 13 #"read-till-end"
0 0 25 3 6 #"))))))"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ]"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    ))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 42 #"; Parser with funny instructions for boxes"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ["
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 12 #"s-expression"
0 0 25 3 3 #"]) "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"ExprS"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 13 #"s-exp-number?"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #") ("
0 0 14 3 4 #"numS"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->number"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 13 #"s-exp-symbol?"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #") ("
0 0 14 3 3 #"idS"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 4 #"))] "
0 0 17 3 57
(
 #"; pode ser um s\303\255mbolo livre nas defini\303\247\303\265es de f"
 #"un\303\247\303\243o"
) 0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 11 #"s-exp-list?"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 25 3 3 #" (["
0 0 14 3 2 #"sl"
0 0 25 3 2 #" ("
0 0 14 3 11 #"s-exp->list"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #")])"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ("
0 0 15 3 4 #"case"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 1 #"+"
0 0 25 3 3 #") ("
0 0 14 3 5 #"plusS"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 1 #"*"
0 0 25 3 3 #") ("
0 0 14 3 5 #"multS"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 1 #"-"
0 0 25 3 3 #") ("
0 0 14 3 7 #"bminusS"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 1 #"~"
0 0 25 3 3 #") ("
0 0 14 3 7 #"uminusS"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 15 3 6 #"lambda"
0 0 25 3 3 #") ("
0 0 14 3 4 #"lamS"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 5 #")))] "
0 0 17 3 13 #"; defini\303\247\303\243o"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 4 #"call"
0 0 25 3 3 #") ("
0 0 14 3 4 #"appS"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 2 #"if"
0 0 25 3 3 #") ("
0 0 14 3 3 #"ifS"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 4 #"cons"
0 0 25 3 3 #") ("
0 0 14 3 5 #"consS"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"car"
0 0 25 3 3 #") ("
0 0 14 3 4 #"carS"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 3 #"cdr"
0 0 25 3 3 #") ("
0 0 14 3 4 #"cdrS"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 15 3 3 #"let"
0 0 25 3 3 #") ("
0 0 14 3 4 #"letS"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 23 #"                      ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 15 3 4 #"let*"
0 0 25 3 3 #") ("
0 0 14 3 5 #"let*S"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 25 #"                        ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 15 3 6 #"letrec"
0 0 25 3 3 #") ("
0 0 14 3 7 #"letrecS"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 5 #"third"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 29 #"                            ("
0 0 14 3 5 #"parse"
0 0 25 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 5 #"quote"
0 0 25 3 3 #") ("
0 0 14 3 6 #"quoteS"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 1 #"("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 11 #"         [("
0 0 14 3 9 #"read-loop"
0 0 25 3 3 #") ("
0 0 14 3 10 #"read-loopS"
0 0 25 3 2 #" ("
0 0 14 3 13 #"s-exp->symbol"
0 0 25 3 2 #" ("
0 0 14 3 6 #"second"
0 0 25 3 1 #" "
0 0 14 3 2 #"sl"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 4 #"list"
0 0 19 3 6 #" input"
0 0 19 3 1 #"\""
0 0 25 3 5 #")]))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"invalid"
0 0 19 3 1 #" "
0 0 19 3 6 #"input\""
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"; Facilitator"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"interpS"
0 0 25 3 2 #" ["
0 0 14 3 1 #"s"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 12 #"s-expression"
0 0 25 3 4 #"]) ("
0 0 14 3 6 #"interp"
0 0 25 3 2 #" ("
0 0 14 3 7 #"desugar"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 14 3 1 #"s"
0 0 25 3 3 #")) "
0 0 14 3 6 #"mt-env"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 10 #"; Examples"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"interpS"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 2 #" ("
0 0 14 3 4 #"call"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 3 #"car"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 3 1 #" "
0 0 22 3 2 #"16"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"interpS"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 4 #"call"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 3 #")) "
0 0 22 3 1 #"8"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 7 #"interpS"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 14 3 4 #"call"
0 0 25 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 4 #"call"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 2 #" ("
0 0 14 3 1 #"~"
0 0 25 3 1 #" "
0 0 22 3 2 #"32"
0 0 25 3 5 #"))) ("
0 0 15 3 6 #"lambda"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 22 3 3 #"200"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 7 #"; Tests"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 25 3 2 #" ("
0 0 14 3 4 #"carC"
0 0 25 3 2 #" ("
0 0 14 3 5 #"consC"
0 0 25 3 2 #" ("
0 0 14 3 4 #"numC"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 3 #") ("
0 0 14 3 4 #"numC"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 14 3 6 #"mt-env"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 4 #"numV"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 2 #"))"
0           0
